<import name="todat-step" src="../Common/components/today-step"></import>

<template>
  <div class="page">
    <div class="average">
      <div class="average-item">
        <text class="average-attr">Weekly</text>
        <text class="average-num">{{weekly}}</text>
      </div>
      <div class="average-item">
        <text class="average-attr">Monthly</text>
        <text class="average-num">{{monthly}}</text>
      </div>
      <div class="average-item">
        <text class="average-attr">Total</text>
        <text class="average-num">{{total}}</text>
      </div>
    </div>
    <todat-step step="{{todayStep}}"></todat-step>
    <canvas class="chart-canvas" id="chart-canvas"></canvas>
  </div>
</template>

<script>
import req from '../Common/api/index'
import utils from '../Common/helper/utils'
import dateUtils from '../Common/helper/date-utils'
let drawingChart = null //当前动画
const maxFrame = 40 //动画总帧数（按照每秒60帧计算）

export default {
  private: {
    todayStep: 0,
    weekly: 0,
    monthly: 0,
    total: 0,
  },
  onShow() {
    this.initData()
  },
  initData(){
    // 获取步数
    utils.getSteps().then(data=>{
      this.$set('todayStep', data.stepsList[6].steps)
      this.showWeekChart(data.stepsList)
      // 上传
      req.pedometerUpdate({
        stepInfoList: data.stepsList
      }).then(()=>{
        // 获取历史数据
        return req.pedometerIndex()
      }).then(res=>{
        if (res.Ret == 0) {
          // 计算本周平均、本月平均、总平均
          let stepInfoList = res.Data
          let weekly = stepInfoList.slice(0, 7).map(a=>Number(a.uStep)).reduce((a, b) => a + b)/7
          let monthly = stepInfoList.slice(0, 30).map(a=>Number(a.uStep)).reduce((a, b) => a + b)/30
          let total = stepInfoList.map(a=>Number(a.uStep)).reduce((a, b) => a + b)/stepInfoList.length
          this.drawAverage(weekly, monthly, total)
        }
      })
    })
  },
  /* 绘制动画 */ 
  showWeekChart(stepsList){
    // 停止掉上一个动画
    if (drawingChart) {
      clearInterval(drawingChart)
    }
    // 开始绘制动画
    const canvas = this.$element('chart-canvas')
    const ctx = canvas.getContext('2d')
    let frame = 0
    drawingChart = setInterval(() => {
      frame ++
      if(frame >= maxFrame){
        clearInterval(drawingChart)
        drawingChart = null;
      }
      this.drawWeekChart(ctx, frame, stepsList)
    }, 17)
  },
  /* 
   * 绘制帧
   * @param  {canvas.context} ctx 画布上下文 
   * @param  {int} frame 第几帧 
   * @param  {array} stepsList 本周步数 
   */
  drawWeekChart(ctx, i, stepsList){
    const width = 1080 //画布宽
    const height = 540 //画布高
    const barWidht = 30 //柱状图宽度

    // 清屏
    ctx.clearRect(0, 0, width, height)

    // 绘制X轴
    ctx.beginPath()
    ctx.moveTo(0, (height-40))
    ctx.lineTo(width, (height-40))
    ctx.lineWidth = 4
    ctx.strokeStyle = '#af8600'
    ctx.stroke()

    // 先求出最大值
    const list = stepsList.map(step=>step.steps)
    const maxSetp = Math.max(...list) 
    // 绘制每一条柱形
    stepsList.map((stepInfo, j) => {
      const step = stepInfo.steps
      const day = dateUtils.getDay(stepInfo.date)
      let baseLine = (j+1)*width/8

      // 绘制柱状图
      let maxHeight = (height-80)
      let barHeight = (i/maxFrame)*maxHeight*step/maxSetp
      let x = baseLine-barWidht/2
      let y = (height-40)-barHeight
      let w = barWidht
      let h = barHeight
      const barGradient = ctx.createLinearGradient(0, height, 0, 0)
      barGradient.addColorStop(0, '#af8600')
      barGradient.addColorStop(1, '#c96100')
      ctx.fillStyle = barGradient
      ctx.font = '36px sans-serif'
      ctx.textAlign = 'center'
      ctx.fillRect(x, y, w, h)
      // 显示步数
      ctx.fillText(parseInt((i/maxFrame)*step), baseLine, y-10)
      // 显示日期
      ctx.fillText(day, baseLine, height)
    })
  },
  
  /* 
   * 刷新统计值
   * @param  {number} weekly 本周平均值
   * @param  {number} monthly 本月平均值
   * @param  {number} total 总平均值
   */
  drawAverage(weekly, monthly, total){
    let frame = 0
    let drawingAverage = setInterval(() => {
      frame ++
      if(frame >= maxFrame){
        clearInterval(drawingAverage)
      }
      this.$set('weekly', parseInt(weekly*(frame/maxFrame)))
      this.$set('monthly', parseInt(monthly*(frame/maxFrame)))
      this.$set('total', parseInt(total*(frame/maxFrame)))
    }, 17)
  }
}
</script>

<style lang="less">
@import '../Common/style/base.less';

.content{
  width: @screenWidth;
  height: @screenHeight;
  flex-direction: column;
  align-items: center;
}
/* 统计 */
.average{
  margin-top: 200px;
  width: 960px;
  justify-content: space-around;
}
.average-item{
  flex-direction: column;
  align-items: center;
}
.average-attr{
  font-size: 54px;
  color: #af8600;
  font-family: "Futura-Light";
}
.average-num{
  font-size: 64px;
  color: #af5500;
  font-family: "Futura-Medium";
}
/* 图表 */
.chart-canvas{
  width: 1080px;
  height: 540px;
  margin-top: 80px;
}
</style>
