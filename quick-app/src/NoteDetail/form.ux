<template>
  <div class="page {{pageClass}}">
    <input class="title" type="text" value="{{title}}" @change="changeInput('title')" name="title" placeholder="标题" />
    <textarea class="content" @change="changeInput('content')" placeholder="内容" >{{content}}</textarea>
    <div class="save-btn-wrapper">
      <input class="save-btn" type="button" value="{{saveBtnMsg}}" @click="onSave" />
    </div>
  </div>
</template>

<script>
import prompt from '@system.prompt'
import router from '@system.router'
import req from '../Common/api/index'

export default {
  protected: {
    id: '',
    status: '',
  },
  private: {
    pageClass: '',
    title: '',
    content: '',
  },
  computed: {
    saveBtnMsg() {
      let msg = 'Save'
      if (!this.id) {
        msg = 'Add'
      }
      if (this.status == 'pending') {
        msg = 'Saveing'
      }
      if (this.status == 'success') {
        msg = 'Success'
      }
      if (this.status == 'failed') {
        msg = 'Retry'
      }
      return msg
    }
  },
  onShow() {
    if (this.id) {
      // 如果有id，则获取内容
      const list = this.$app.getStore('noteList')
      const detail = list.find(item=>item.uNoteID==this.id)
      if (detail) {
        this.$set('title', detail.sNoteTitle)
        this.$set('content', detail.tNoteContent)
      }
    } else {
      // 如果没有id，则新建
    }
  },
  changeInput(key, e) {
    this.$set(key, e.value)
  },
  /* 新增或保存 */
  onSave(){
    this.$set('status', 'loading')
    if (this.id) {
      this.update()
    } else {
      this.add()
    }
  },
  add(){
    this.$set('status', 'pending')
    let params = {
      'sNoteTitle': this.title,
      'tNoteContent': this.content,
    }
    req.noteAdd(params).then(res=>{
      if (res.Ret == 0) {
        this.$set('status', 'success')
        this.$app.setStore('noteList', null)
        prompt.showToast({
          message: '新增成功'
        })
        router.back()
      } else {
        this.$set('status', 'failed')
        this.shake()
        prompt.showToast({
          message: Object.values(res.Data.errors)[0]
        })
      }
    })
  },
  update(){
    this.$set('status', 'pending')
    let params = {
      'uNoteID': this.id,
      'sNoteTitle': this.title,
      'tNoteContent': this.content,
    }
    req.noteUpdate(params).then(res=>{
      if (res.Ret == 0) {
        this.$set('status', 'success')
        let list = this.$app.getStore('noteList')
        list = list.map(item=>{
          if (item.uNoteID==this.id) {
            item.sNoteTitle = this.title
            item.tNoteContent = this.content
          }
          return item
        })
        this.$app.setStore('noteList', list)
        prompt.showToast({
          message: '保存成功'
        })
        router.back()
      } else {
        this.$set('status', 'failed')
        this.shake()
        prompt.showToast({
          message: Object.values(res.Data.errors)[0]
        })
      }
    })
  },
  /* 出错时页面抖动动画 */ 
  shake(){
    this.$set('pageClass', 'shake')
    setTimeout(()=>{
      this.$set('pageClass', '')
    }, 500)
  }
}
</script>

<style lang="less">
@import '../Common/style/base.less';

.page{
  padding: 24px;
}
.title{
  width: 100%;
  height: 120px;
  border-radius: 10px;
  padding: 20px 32px;
  margin-bottom: 36px;
  font-size: 64px;
  color: #fff;
}
.content{
  width: 100%;
  min-height: @screenHeight - 300px;
  font-size: 44px;
  line-height: 64px;
  color: #ddd;
  margin-bottom: 36px;
  padding-bottom: 148px;
}
.save-btn-wrapper{
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background-color: #000;
  width: @screenWidth;
  height: 180px;
}
.save-btn{
  margin: 30px;
  width: 1020px;
  height: 120px;
  border-radius: 10px;
  background-color: @saveBtn;
  color: #fff;
  font-size: 48px;
  &:active{
    background-color: @saveBtnActive;
  }
}
</style>
